MILESTONE - 2

Team member 1 - Harshitha Katpally
Worked on writing the grammar rules for expressions and functions.

Team member 2 - Divya Yadamreddi
Worked on writing grammar rules for declarations, statements, while loop and the if conditional statement.

Team member 3 - Venkata Akhil Madaraju
Designed the language flow and the representation of intermediate code.

Team member 4 - Venkata Sai Shirisha Kakarla
Worked on designing the language and came up with regular expressions for data types and identifiers.

The language name, programming paradigm and the language being used to compile and execute our language has been collectively decided after a debate.
============================================================================================

MILESTONE - 3(TENTATIVE PLAN)

Team member 1 - Harshitha Katpally
Will work on tokenizing the input program which will be the input for the parser.

Team member 2 - Divya Yadamreddi
Will work on generating the parse tree from the tokens sent by the lexical analyzer.

Team member 3 and 4 - Venkata Akhil Madaraju, Venkata Sai Shirisha Kakarla
Will work on developing the interpreter that will parse the parse tree and return the output of the program.
============================================================================================

WORK PROGRESS

Team member 1 - Harshitha Katpally
1.Implemented the tokenizer with space, newline and endofFile.
2.Parser corrected with functionalities and started working on ppt.
3.Implemented the parser for additional functionality.

Team member 4 - Venkata Sai Shirisha Kakarla
1.Implemented the complete tokenizer.
2.Started woking on Interpreter.
3.Implemented interpreter to support additional features added in language.

Team member 2 - Divya Yadamreddi
1.Implemented reading the program form the txt file and tokenizing it.
2.Completed Parser implementation and added few Interpreter functionalities.
3.Modified interpreter according to the features added in parser.

Team member 3 - Venkata Akhil Madaraju
1.Started the functionality of Parser and implemented it partially.
2.Added more functionalities to interpreter and corrected some errors.
3.Generating an intermediate code file and reading in for runtime.

 
